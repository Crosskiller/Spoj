import java.io.*;

 
 
 
 
class Main
{
   
 
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		//start of the code
		public static int binary_search(int a[], int n)
		{
			int i=0;
			int j = a.length-1;
			while(i<=j)
			{
				int mid = (i+j)/2 ;
				if(a[mid]>n)
				{
					j = mid-1;
				}
				else if(a[mid]<n)
				{
					i = mid+1;
				}
				else
				{
					return mid;
				}
			}
			return -1;
		}
		public static void main(String[] args) throws IOException 
		{
        
		while(true)
		{
			int n1 = in.nextInt();
			if(n1==0)
				break;
			int arr1[] = new int[n1];
			for(int i=0; i<n1; i++)
				arr1[i] = in.nextInt();
			int n2 = in.nextInt();
			int arr2[] = new int[n2];
			for(int i=0; i<n2; i++)
				arr2[i] = in.nextInt();
			int i = 0;
			int sum = 0;
			int sum1 = 0,k=0;
			while(i<n1)
			{
				int pos = binary_search(arr2,arr1[i]);
				if(pos!=-1)
				{
					int sum2 = 0;
					for(int j=k; j<=pos; j++)
							sum2+=arr2[j];
					k = pos+1;
					sum1+=arr1[i];
					if(sum1>sum2)
						sum+=sum1;
					else
						sum+=sum2;
					sum1 = 0;
					i++;
					continue;
				}
				sum1+=arr1[i];
				i++;
			}
			int sum2 = 0;
			for(int j=k; j<arr2.length; j++)
				sum2+=arr2[j];
			if(sum1>sum2)
				sum+=sum1;
			else
				sum+=sum2;
			out.println(sum);
			out.flush();
		}
		//end of the code
        }
}
    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }