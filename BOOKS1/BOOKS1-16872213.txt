
import java.io.*;
import java.util.*;
 
class Main
{
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		public static int w;
		public static boolean func(int book[], int mid)
		{
			int worker_count = 1, workload = 0;
			for(int i=0; i<book.length; i++)
			{
				workload+=book[i];
				if(workload>mid)
				{
					worker_count++;
					if(worker_count>w)
						return false;
					workload = book[i];
				}
			}
			return true;
		}
		public static void main(String[] args) throws IOException 
		{
			int t = in.nextInt();
			for(int p=0; p<t; p++)
			{
				int n = in.nextInt();
				w = in.nextInt();
				int book[] = new int[n];
				int lb = 0;
				for(int i=0; i<n; i++)
				{
					book[i] = in.nextInt();
					if(book[i]>lb)
						lb = book[i];
				}
				//Arrays.sort(book);
				int ub = Integer.MAX_VALUE, min = Integer.MAX_VALUE;
				while(lb<=ub)
				{
					//System.out.println("1");
					int mid = lb + (ub-lb)/2;
					//System.out.println(func(book,mid)+" "+mid);
					if(func(book,mid))
					{
						if(mid<min)
							min = mid;
						ub = mid-1;
					}
					else
						lb = mid+1;
				}
				int workload = 0, count = 1;
				//out.println(min);
				String s = "";
				for(int i=n-1; i>=0; i--)
				{
					workload += book[i];
					if(workload <= min && w-count <= i)
						s += book[i]+" ";
					else
					{
						count++;
						s += "/ "+book[i]+" ";
						workload = book[i];
					}
				}
				/*char ch[] = s.toCharArray();
				for(int i=0; i<ch.length; i++)
					out.println(ch[i]);*/
				StringTokenizer st = new StringTokenizer(s);
				s = st.nextToken();
				while(st.hasMoreTokens())
				{
					//if(!st.nextToken().equals("/"))
					s = st.nextToken()+" "+ s;
					//out.println(st.nextToken());
				}
				out.println(s);
				//out.println(min);
			}
			out.flush();
			
		//end of the code
        }
}
    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }