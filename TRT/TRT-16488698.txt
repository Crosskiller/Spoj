import java.io.*;
import java.util.*;
 
class Main
{
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		
		public static int memo[][];
		public static int getMax(int a,int b)
		{
			return (a>b)?a:b;
		}
		public static int maxSell(int a[],int lb, int ub)
		{
			int f;
			if(lb>ub)
				return 0;
			else if(memo[lb][ub]!=0)
				return memo[lb][ub];
			else
			{
				int day = a.length-(ub-lb);
				f = getMax(maxSell(a,lb+1,ub)+a[lb]*day,maxSell(a,lb,ub-1)+a[ub]*day);
			}
			memo[lb][ub] = f;
			return f;
		}
		public static void main(String[] args) throws IOException 
		{
			int n = in.nextInt();
			int a[] = new int[n];
			memo = new int[n][n];
			for(int i=0; i<n; i++)
			{
				a[i] = in.nextInt();
			}
			int ans = maxSell(a,0,n-1);
			out.println(ans);
			out.flush();
			
		//end of the code
        }
}
    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }