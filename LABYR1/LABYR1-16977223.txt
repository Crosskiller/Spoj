//import java.io.BufferedInputStream;
import java.io.InputStream;
//import java.io.BufferedReader;
//import java.io.InputStreamReader;
//import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Arrays;
//import java.math.BigInteger;
import java.util.InputMismatchException;
//import java.util.Arrays;
//import java.util.List;
//import java.util.LinkedList;
//import java.util.Collections;
//import java.util.Comparator;
//import java.util.Map;
//import java.util.HashMap;
class Vertex
{
	public int i,j;
	public Vertex(int i, int j)
	{
		this.i = i; 
		this.j = j;
	}
}
class Graph
{
	public int r,c;
	public char matrix[][];
	public boolean visited[][];
	public Graph(int n, int m)
	{
		r = n;
		c = m;
		matrix = new char[n][m];
		visited = new boolean[n][m];
	}
	public Vertex getAdjVertex(Vertex v)
	{
		int i = v.i;
		int j = v.j;
		if(j+1<c)
		{
			if(matrix[i][j+1]=='.' && !visited[i][j+1])
				return new Vertex(i,j+1);
		}
		if(i-1>=0)
		{
			if(matrix[i-1][j]=='.' &&  !visited[i-1][j])
				return new Vertex(i-1,j);
		}
		if(j-1>=0)
		{
			if(matrix[i][j-1]=='.' &&  !visited[i][j-1])
				return new Vertex(i,j-1);
		}
		if(i+1<r)
		{
			if(matrix[i+1][j]=='.' &&  !visited[i+1][j])
				return new Vertex(i+1,j);
		}
		return new Vertex(-1,-1);
	}
	public int dfs(int x, int y)
	{
		if(y<0)
			return 0;
		ArrayDeque<Vertex> st = new ArrayDeque<Vertex>();
		Vertex v = new Vertex(x,y);
		visited[x][y] = true;
		st.push(v);
		int d = 0,max = 0;
		Vertex vmax = null;
		while(!st.isEmpty())
		{
			v = st.peek();
			Vertex v1 = getAdjVertex(v);
			if(v1.i==-1)
			{
				v1 = st.remove();
				d--;
			}
			else
			{
				//System.out.println(v1.i+" "+v1.j);
				st.push(v1);
				visited[v1.i][v1.j] = true;
				d++;
				if(d>max)
				{
					max = d;
					vmax = v1;
				}
			}
		}
		//System.out.println("1--->"+max);
		if(max!=0)
			return dfs1(vmax.i, vmax.j);
		else
			return 0;
	}
	public int dfs1(int x, int y)
	{
		//System.out.println("hey");
		visited = new boolean[r][c];
		ArrayDeque<Vertex> st = new ArrayDeque<Vertex>();
		Vertex v = new Vertex(x,y);
		visited[x][y] = true;
		st.push(v);
		int d = 0,max = 0;
		while(!st.isEmpty())
		{
			v = st.peek();
			Vertex v1 = getAdjVertex(v);
			if(v1.i==-1)
			{
				v1 = st.remove();
				d--;
			}
			else
			{
				st.push(v1);
				visited[v1.i][v1.j] = true;
				d++;
				if(d>max)
				{
					max = d;
				}
			}
		}
		return max;
	}
}




class Main
{
	public static void main(String[] args)throws IOException
	{
		Scan scan = new Scan();
		Print print = new Print();
		int t = scan.scanInt();
		for(int p=0; p<t; p++)
		{
			int column = scan.scanInt();
			int row = scan.scanInt();
			Graph g = new Graph(row,column);
			for(int i=0; i<row; i++)
				g.matrix[i] = (scan.scanString()).toCharArray();
			
			/*for(int i=0; i<row; i++)
			{
				for(int j=0; j<column; j++)
				{
					print.print(Character.toString(mat[i][j]));
				}
				print.printLine("");
			}*/
			int pos = -1, i = 0;
			
			for(i=0; i<row; i++)
			{
				pos = Arrays.binarySearch(g.matrix[i], '.');
				if(pos>0)
					break;
			}
			print.printLine("Maximum rope length is "+Integer.toString(g.dfs(i,pos))+".");
		}	
        print.close();
        //end of the code
	}
}













class Scan
{
	private byte[] buf=new byte[1024];
	private int index;
	private InputStream in;
	private int total;
	public Scan()
	{
		in=System.in;
	}
	public int scan()throws IOException
	{
		if(total<0)
		throw new InputMismatchException();
		if(index>=total)
		{
			index=0;
			total=in.read(buf);
			if(total<=0)
			return -1;
		}
		return buf[index++];
	}
	public int scanInt()throws IOException
	{
		int integer=0;
		int n=scan();
		while(isWhiteSpace(n))
		n=scan();
		int neg=1;
		if(n=='-')
		{
			neg=-1;
			n=scan();
		}
		while(!isWhiteSpace(n))
		{
			if(n>='0'&&n<='9')
			{
				integer*=10;
				integer+=n-'0';
				n=scan();
			}
			else throw new InputMismatchException();
		}
		return neg*integer;
	}
	public double scanDouble()throws IOException
	{
		double doub=0;
		int n=scan();
		while(isWhiteSpace(n))
		n=scan();
		int neg=1;
		if(n=='-')
		{
			neg=-1;
			n=scan();
		}
		while(!isWhiteSpace(n)&&n!='.')
		{
			if(n>='0'&&n<='9')
			{
				doub*=10;
				doub+=n-'0';
				n=scan();
			}
			else throw new InputMismatchException();
		}
		if(n=='.')
		{
			n=scan();
			double temp=1;
			while(!isWhiteSpace(n))
			{
				if(n>='0'&&n<='9')
				{
					temp/=10;
					doub+=(n-'0')*temp;
					n=scan();
				}
				else throw new InputMismatchException();
			}
		}
		return doub*neg;
	}
	public String scanString()throws IOException
	{
		StringBuilder sb=new StringBuilder();
		int n=scan();
		while(isWhiteSpace(n))
		n=scan();
		while(!isWhiteSpace(n))
		{
			sb.append((char)n);
			n=scan();
		}
		return sb.toString();
	}
	private boolean isWhiteSpace(int n)
	{
		if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)
		return true;
		return false;
	}
}
 
class Print
{
	private final BufferedWriter bw;
	public Print()
	{
		bw=new BufferedWriter(new OutputStreamWriter(System.out));
	}
	public void print(String str)throws IOException
	{
		bw.append(str);
	}
	public void printLine(String str)throws IOException
	{
		print(str);
		bw.append("\n");
	}
	public void close()throws IOException
	{
		bw.close();
	}
} 