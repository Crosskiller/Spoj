import java.io.*;
import java.util.*;
 
class one
{
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		
		public static void merging(int a[], int l, int m, int n, int o)
		{
			int t[] = new int[a.length];
			int p = l, q = n, k = l;
			while(p<=m && q<=o)
			{
				if(a[p]>a[q])
					t[k++] = a[q++];
				else
					t[k++] = a[p++];
			}
			while(p<=m)
				t[k++] = a[p++];
			while(q<=o)
				t[k++] = a[q++];
			for(int i=l; i<=o; i++)
			{
				a[i] = t[i];
			}
		}
		public static void sort(int a[],int lb, int ub)
		{
			if(lb<ub)
			{
				int mid = (lb+ub)/2;
				sort(a,lb,mid);
				sort(a,mid+1,ub);
				merging(a,lb,mid,mid+1,ub);
			}
		}
		public static int search(int arr[], int item)
		{
			int i = 0, j = arr.length-1;
			int mid=0;
			while(i<j)
			{
				mid = (i+j)/2;
				if(arr[mid]>=item)
					j = mid;
				else
					i = mid+1;
			}
			if(i!=0)
				return ((int)Math.abs(arr[i]-item)>(int)Math.abs(arr[i-1]-item))?arr[i-1]:arr[i];
			else
				return arr[i];
		}
		
		public static void main(String[] args) throws IOException 
		{
			int t = in.nextInt();
			for(int p=0; p<t; p++)
			{
				int n = in.nextInt();
				int a[] = new int[n];
				for(int i=0; i<n; i++)
				{
					a[i] = in.nextInt();
				}
				int m = in.nextInt();
				int b[] = new int[m];
				for(int i=0; i<m; i++)
				{
					b[i] = in.nextInt();
				}
				sort(a,0,n-1);
				sort(b,0,m-1);
				int min = 10000000;
				if(a.length<b.length)
				{
					for(int i=0; i<n; i++)
					{
						int val = (int)Math.abs(search(b,a[i])-a[i]);
						if(min>val)
							min = val;
					}
				}
				else
				{
					for(int i=0; i<m; i++)
					{
						//out.println(search(a,b[i]));
						int val = (int)Math.abs(search(a,b[i])-b[i]);
						//out.println(val+" ");
						if(min>val)
							min = val;
					}
				}
				out.println(min);
				out.flush();
			}
			
				
		}
		//end of the code
}

    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }