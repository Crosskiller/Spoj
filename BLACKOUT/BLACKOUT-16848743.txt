import java.io.*;
import java.util.*;


	
	 
	
	class Main
	{
			static Parser11 in = new Parser11(System.in);
			static  PrintWriter out = new PrintWriter(System.out);
			public static int[][] getSumMatrix(int a[][])
			{
				int b[][] = new int[a.length][a[0].length];
				for(int i=0; i<a.length; i++)
				{
					for(int j=0; j<a[0].length; j++)
					{
						b[i][j] = a[i][j];
						if(i-1>=0)
							b[i][j] = b[i][j] + b[i-1][j];
						if(j-1>=0)
							b[i][j] = b[i][j] + b[i][j-1];
						if(i-1>=0 && j-1>=0)
							b[i][j] = b[i][j] - b[i-1][j-1];
					}
				}
				return b;
			}
			public static int getPeople(int a[][],int i1, int j1, int i2, int j2)
			{
				int sum = a[i2][j2];
				if(i1-1>=0)
					sum -= a[i1-1][j2];
				if(j1-1>=0)
					sum -= a[i2][j1-1];
				if(i1-1>=0 && j1-1>=0)
					sum += a[i1-1][j1-1];
				return sum;
			}
			
			public static int getBlocks(int i1, int j1, int i2, int j2)
			{
				return (j2-j1+1)*(i2-i1+1); 
			}
			public static void main(String[] args) throws IOException 
			{
				int n = in.nextInt();
				int m = in.nextInt();
				int q = in.nextInt();
				int k = in.nextInt();
				int matrix[][] = new int[n][m];
				for(int i=0; i<n; i++)
				{
					for(int j=0; j<m; j++)
					{
						matrix[i][j] = in.nextInt();
					}
				}
				int matrixSum[][] = getSumMatrix(matrix);
				/*for(int i=0; i<n; i++)
				{
					for(int j=0; j<m; j++)
					{
						try{
						System.out.print(matrixSum[i][j]+" ");}
						catch(Exception e)
						{
							System.out.println(e);
						}
					}
					out.println("");
				}*/
				int val[] = new int[q];	
				int w[] = new int[q];
				for(int p=0; p<q; p++)
				{
					int i1 = in.nextInt();
					int j1 = in.nextInt();
					int i2 = in.nextInt();
					int j2 = in.nextInt();
					w[p] = getPeople(matrixSum,i1-1,j1-1,i2-1,j2-1);
					//out.println(w[p]);
					val[p] = getBlocks(i1,j1,i2,j2);
					//out.println(val[p]);
				}
					int dp[][] = new int[q+1][k+1];
					for(int i=1; i<=q; i++)
					{
						for(int j=1; j<=k ;j++)
						{
							if(w[i-1]>j)
								dp[i][j] = dp[i-1][j];
							else
								dp[i][j] = Math.max(dp[i-1][j], dp[i-1][j-w[i-1]]+val[i-1]);
						}
					}
					out.println(dp[q][k]);
				
				out.flush();
				
				
					
				
			}//end of the code
	}
	
	    
	    
	    
	    
	    
	    
	 
	    
	 
	                
	                
	        
	            
	            
	 
	  
	 
	  
	  
	 
	 
	   
	 
	     class Parser11{
	        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
	        private InputStream din;    // Underlying input stream
	        private byte[] buffer;      // Self-maintained buffer
	        private int bufferPointer;  // Current read position in the buffer
	        private int bytesRead;      // Effective bytes in the buffer read from the input stream
	 
	        public Parser11(InputStream in) {
	            din = in;
	            buffer = new byte[BUFFER_SIZE];
	            bufferPointer = bytesRead = 0;
	        }
	 
	        /**
	         * Read the next integer from the input stream.
	         * @return The next integer.
	         * @throws java.io.IOException
	         */
	        public int nextInt() throws IOException {
	            int result = 0;
	            byte c = read();
	            while (c <= ' ') c = read();
	            boolean neg = (c == '-');
	            if (neg) c = read();
	            while (c >= '0' && c <= '9') {
	                result = result * 10 + c - '0';
	                c = read();
	            }
	            if (neg) return -result;
	            return result;
	        }
	 
	 
	        public String readLine() throws IOException {
	            StringBuilder line = new StringBuilder();
	            char c;
	            while ((c = (char)(read())) != '\n') {
	                line.append(c);
	            }
	            return line.toString();
	        }
	 
	        /**
	         * Read the next byte of data from the input stream.
	         * @return the next byte of data, or -1 if the end of the stream is reached.
	         * @throws IOException if an I/O error occurs.
	         */
	        public byte read() throws IOException {
	            if (bufferPointer == bytesRead)
	                fillBuffer();
	            return buffer[bufferPointer++];
	        }
	 
	        /**
	         * Read data from the input stream into the buffer
	         * @throws IOException if an I/O error occurs.
	         */
	        private void fillBuffer() throws IOException {
	            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
	            if (bytesRead == -1)
	                buffer[0] = -1;
	        }
	        public long nextLong() throws IOException
	    {
	        long ret = 0;
	        byte c = read();
	        while (c <= ' ') c = read();
	        boolean neg = c == '-';
	        if (neg) c = read();
	        do {
	            ret = ret * 10 + c - '0';
	            c = read();
	        } while (c >= '0' && c <= '9');
	        if (neg) return -ret;
	        return ret;
	    }
	    }