import java.io.*;
import java.util.*;
 
class Main
{
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		
		public static void func(int a[], int m)
		{
			int max = 0, l = 0, r = 0, count = 0,cmax=0;
			boolean flag = false;
			long sum = 0; 
			while(r<a.length)
			{
				sum+=a[r++];
				count++;
				while(sum>m && l<r)
				{
					sum-=a[l++];
					count--;
					flag = true;
				}
				if(count>=cmax)
				{
					cmax = count;
					if(flag)
					{
						if(sum<max)
							max = (int)sum;
					}
					else
					{
						if(sum>max)
						max = (int)sum;
					}
					flag = false;
				}
			}
			out.println(max+" "+cmax);
			return;
		}
		
		public static void main(String[] args) throws IOException 
		{
			int t = in.nextInt();
			for(int p=0; p<t; p++)
			{	
				int n = in.nextInt();
				int m = in.nextInt();
				int a[] = new int[n];
				for(int i=0; i<n; i++)
					a[i] = in.nextInt();
				func(a,m);
			}
			out.flush();
			
		//end of the code
        }
}
    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }